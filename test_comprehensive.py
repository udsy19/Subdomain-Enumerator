#!/usr/bin/env python3
"""
Comprehensive test of all improvements:
- Fixed SSL detection
- Improved Nmap scanning 
- Parallel processing
- Response time capture
"""

import sys
import time
import asyncio
from main_tui_merged import UltraRobustEnumerator, SubdomainResult

async def test_ssl_improvements():
    """Test improved SSL detection"""
    print("üîí Testing SSL Detection Improvements...")
    
    enumerator = UltraRobustEnumerator()
    
    # Test SSL detection on known HTTPS sites
    test_domains = ['google.com', 'github.com']
    
    for domain in test_domains:
        result = SubdomainResult(
            subdomain=domain,
            source="Test",
            http_status=0,
            ip_addresses=[],
            technologies=[],
            confidence_score=1.0,
            discovered_at=time.time()
        )
        
        print(f"  Testing SSL for {domain}...")
        discovered = await enumerator._analyze_ssl_certificate(result)
        
        print(f"    SSL Verified: {result.ssl_domain_verified}")
        print(f"    SSL Issuer: {result.ssl_issuer}")
        print(f"    SSL Subject: {result.ssl_subject}")
        print(f"    SAN domains found: {len(discovered)}")
        print()

async def test_nmap_improvements():
    """Test improved Nmap scanning"""
    print("üîç Testing Nmap Scanning Improvements...")
    
    enumerator = UltraRobustEnumerator()
    
    # Test on a target that should have open ports
    test_target = "google.com"
    
    print(f"  Scanning {test_target} with improved Nmap...")
    nmap_result = enumerator.perform_nmap_scan(test_target)
    
    print(f"    Open Ports: {nmap_result['open_ports']}")
    print(f"    Services: {len(nmap_result['services'])} found")
    if nmap_result['services']:
        for service in nmap_result['services'][:2]:
            print(f"      - {service}")
    print(f"    OS Detection: {nmap_result['os_detection']}")
    print(f"    SSL Info: {'Yes' if nmap_result['ssl_info'] else 'No'}")
    print(f"    HTTP Info: {'Yes' if nmap_result['http_info'] else 'No'}")
    print()

async def test_parallel_processing():
    """Test parallel Nmap processing"""
    print("‚ö° Testing Parallel Nmap Processing...")
    
    enumerator = UltraRobustEnumerator()
    
    # Create sample results
    sample_results = {}
    test_domains = ['google.com', 'github.com']
    
    for domain in test_domains:
        result = SubdomainResult(
            subdomain=domain,
            source="Test",
            http_status=200,  # Only scan domains with HTTP 200
            ip_addresses=["1.2.3.4"],
            technologies=[],
            confidence_score=1.0,
            discovered_at=time.time()
        )
        sample_results[domain] = result
    
    def progress_callback(phase, progress, **kwargs):
        message = kwargs.get('message', '')
        print(f"    {phase}: {message}")
    
    print(f"  Running parallel Nmap scans on {len(sample_results)} targets...")
    start_time = time.time()
    
    await enumerator.parallel_nmap_scanner(sample_results, progress_callback)
    
    elapsed = time.time() - start_time
    print(f"  Parallel scanning completed in {elapsed:.2f} seconds")
    
    # Check results
    for domain, result in sample_results.items():
        ports = len(result.nmap_open_ports)
        services = len(result.nmap_services)
        print(f"    {domain}: {ports} ports, {services} services")
    print()

async def test_excel_export():
    """Test Excel export with all improvements"""
    print("üìä Testing Excel Export with Improvements...")
    
    enumerator = UltraRobustEnumerator()
    
    # Create comprehensive test results
    test_result = SubdomainResult(
        subdomain="test.google.com",
        source="Test_Suite",
        http_status=200,
        ip_addresses=["142.250.80.14"],
        technologies=["nginx", "Google"],
        confidence_score=0.95,
        discovered_at=time.time(),
        response_time=0.234,  # Test response time
        server="nginx/1.18.0",
        ssl_domain_verified=True,
        ssl_issuer="Google Trust Services",
        ssl_subject="*.google.com",
        ownership_info="Google LLC"
    )
    
    # Add some fake Nmap data to test columns
    test_result.nmap_open_ports = ["80/tcp", "443/tcp"]
    test_result.nmap_services = ["80/tcp: http nginx 1.18.0", "443/tcp: https nginx 1.18.0"]
    test_result.nmap_os_detection = "Linux 3.2 - 4.9"
    test_result.nmap_ssl_info = "TLS 1.3, certificate valid"
    test_result.nmap_http_info = "Server: nginx/1.18.0"
    
    sample_results = {"test.google.com": test_result}
    
    try:
        filename = enumerator.save_advanced_excel(sample_results, "comprehensive_test")
        print(f"  ‚úÖ Excel file created: {filename}")
        print("  File should contain:")
        print("    - Main sheet with ownership column")
        print("    - Detailed sheet with Nmap columns (no SSL columns)")
        print("    - Response time data")
        print("    - All improved data fields")
        
        # Verify data population
        result = sample_results["test.google.com"]
        print(f"  Data verification:")
        print(f"    Response Time: {result.response_time}s")
        print(f"    SSL Verified: {result.ssl_domain_verified}")
        print(f"    SSL Issuer: {result.ssl_issuer}")
        print(f"    Ownership: {result.ownership_info}")
        print(f"    Nmap Ports: {len(result.nmap_open_ports)}")
        print(f"    Nmap Services: {len(result.nmap_services)}")
        
    except Exception as e:
        print(f"  ‚ùå Excel export failed: {e}")
        return False
    
    return True

async def main():
    """Run all comprehensive tests"""
    print("üöÄ Starting Comprehensive Improvement Tests")
    print("=" * 60)
    
    try:
        # Test SSL improvements
        await test_ssl_improvements()
        
        # Test Nmap improvements  
        await test_nmap_improvements()
        
        # Test parallel processing
        await test_parallel_processing()
        
        # Test Excel export
        success = await test_excel_export()
        
        if success:
            print("\nüéâ All comprehensive tests passed!")
            print("\n‚ú® Improvements Verified:")
            print("  ‚úÖ SSL detection with multiple fallback methods")
            print("  ‚úÖ Improved Nmap scanning (basic + detailed)")
            print("  ‚úÖ Parallel Nmap processing with progress tracking")
            print("  ‚úÖ Response time capture")
            print("  ‚úÖ Enhanced Excel export with proper data population")
            print("  ‚úÖ Removed SSL columns from detailed sheet")
            print("  ‚úÖ Added comprehensive Nmap columns")
        else:
            print("\n‚ùå Some tests failed.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Tests interrupted by user.")
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())